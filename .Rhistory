A<B #A menor a B (True)
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(x)->
#3.Comparación ó "operadores relacionales": Toman decisiones a través de comparaciones.
#Lo que sucede acá es que se evalúa la condición, por ejemplo A<B
#El resultado puede se 1 = Verdadero ó O=Falso
#el 1 ó 0 no tiene que ver con el [1] al lado del resultado.
A<B #A menor a B (True)
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(TRUE)->
#3.Comparación ó "operadores relacionales": Toman decisiones a través de comparaciones.
#Lo que sucede acá es que se evalúa la condición, por ejemplo A<B
#El resultado puede se 1 = Verdadero ó O=Falso
#el 1 ó 0 no tiene que ver con el [1] al lado del resultado.
A<B #A menor a B (True)
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(TRUE)->
#3.Comparación ó "operadores relacionales": Toman decisiones a través de comparaciones.
#Lo que sucede acá es que se evalúa la condición, por ejemplo A<B
#El resultado puede se 1 = Verdadero ó O=Falso
#el 1 ó 0 no tiene que ver con el [1] al lado del resultado.
A<B #A menor a B (True)
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(0)->
#3.Comparación ó "operadores relacionales": Toman decisiones a través de comparaciones.
#Lo que sucede acá es que se evalúa la condición, por ejemplo A<B
#El resultado puede se 1 = Verdadero ó O=Falso
#el 1 ó 0 no tiene que ver con el [1] al lado del resultado.
A<B #A menor a B (True)
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(A)->
#3.Comparación ó "operadores relacionales": Toman decisiones a través de comparaciones.
#Lo que sucede acá es que se evalúa la condición, por ejemplo A<B
#El resultado puede se 1 = Verdadero ó O=Falso
#el 1 ó 0 no tiene que ver con el [1] al lado del resultado.
A<B #A menor a B (True)
#Tipo 2: Binarios
#Se situan entre dos expresiones aritmeticas.
A+B
A-B
A*B
A/B
A mod B
AmodB
AmodB
A mod B
A mood B
A mod B
AmodB
A%%B
A mod B
A mod B
x mod B
A mod B
A mod B
AmodB
BmodB
A%%B
B%%A
A/B #Se divide A sobre B
A%/%B
A%%B
7%%5
8%%3
15%%4
A^B #Potencia
exp(1) #número e
exp(3)#e^3
sqrt(2) #Raiz cuadrada
log(3) #Logaritmo neperiano
log(3,10) #logaritmo de 3 en base 10
abs(-3,4) #valor absoluto
abs(-3,4) #valor absoluto
abs(-3,4) #valor absoluto
abs(3,4) #valor absoluto
abs(3.4) #valor absoluto
abs(-3.4) #valor absoluto
pi
#2.Lógicos:Entrega un resultado a partir de que se cumpla o no una condición.
#Producen un resultado Booleano (True o False)
#Sus operados también son valores lógicos; Es decir los valores con los que se realiza también son True o False.
#Esto genera una serie de valores que pueden ser parametrizados con los valores numericos 0 y 1.
!(TRUE)
TRUE||FALSE
TRUE&&FALSE
#Desarrollo tarea 3
#nuevos elementos
#1. Las listas (tipo de variable que contiene colecciones de manera ordenada)
#2. For
listaDeNumeros <- list(2,5,6,2,1,5,6,10,11,20,15
)
View(listaDeNumeros)
View(listaDeNumeros)
#Se observa que a pesar de que la lista es un tipo de variable, esta se crea en datos, ya que posee elementos dentro (2,5,6,2,1,5,6,10,11,20,15).
#para acceder a estos existen dos formas
#forma 1. Forma directa que implica ir a la posición del elemento.
#Forma 2. FOR-LOOP Extraer el elemto directamente.
#Forma 1 PRUEBA
listaDeNumeros[5]
#Esto indica que en la posición 5 esta el 1.
n <- 10
n <- 10
n
print(n)
#Al colocar n o print (n), el resultado es [1] 10 lo que signifca
#que el primer elemento del objeto n es 10.
L <- 10+2
(5+4)
ls()
# con ls () se muestran los nombres de los objetos ubicados en la esquina superior derecha.
ls(pat="D")
ls(pat="^D")
ls(pat="^l")
#restrinfir la lista a aquellos objetos que comience con ese caracter
Paula <- 10
Francisco <- 5
Danae <- 7
Dante <- 3
Marco <- 8
Myriam <- 4
Pablo <- 9
Patrcia <- 12
ls(pat"P")
ls(pat="P")
ls(pat="^P")
ls(pat="^D")
ls.str()
rm(Paula)
#se utiliza rm(nombre del objeto) para borrarlo de la memoria
rm(Dante,Francisco)
#Se utiliza rm(,)para eliminar dos objetos de la memoria.
rm=(list=ls())
#Se utiliza rm(,)para eliminar dos objetos de la memoria.
rm(list=ls())
#Ejemplo Práctico, se crearán nuevas variables.
Paula <- 10
Francisco <- 5
Danae <- 7
Viviana <- 10
Dante <- 3
Marco <- 8
Myriam <- 4
Pablo <- 9
Patrcia <- 12
#Se eliminan todas las variables
rm(list=ls(pat="^P"))
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
---------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 1
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
---------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 1
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
---------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
------------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Se eliminan todas las variables
rm(list=ls(pat="^P"))
#Se utiliza rm(,)para eliminar dos objetos de la memoria.
rm(list=ls())
#Ejemplo Práctico, se crearán nuevas variables.
Paula <- 10
Francisco <- 5
Danae <- 7
Viviana <- 10
Dante <- 3
Marco <- 8
Myriam <- 4
Pablo <- 9
Patrcia <- 12
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
------------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
------------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
Camila<- 2
--------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
--------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
----------------------------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
Pablo <- 9
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
x<- 2
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
n <- 10
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x<- 2
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
l<- 2
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
l<-2
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
l<-2
---------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
x <- 2
x <- 2
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P.
------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
x <- 2
x <- 2
x <- 2
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P
--------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Para borrar selectivamente algunos objetos, en este caso todos los objetos que comienzan con la letra P
--------------------------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
x <- 2
--------
#Atributos
#Estos especifican el tipo de dato representado por el objeto
#La función sobre un objeto depende de los atributos de este
#Todo objeto posee dos atributos intrínsicos
#1.Tipo: Clase básica de los objetos
#y 2. Longitud: Número de elementos en el objeto
#Para ver el tipo y la longitud se ven las funciones mode y length
x <- 2
mode(x)
#indica que el 2 es un número
length(x)
#Ejemplo 2
y <- (3,4,5)
#Desarrollo tarea 3
#nuevos elementos
#1. Las listas (tipo de variable que contiene colecciones de manera ordenada)
#2. For
listaDeNumeros <- list(2,5,6,2,1,5,6,10,11,20,15)
#Ejemplo 2
mode(listaDeNumeros)
#Se indica que contiene una lista
length(listaDeNumeros)
#Ejemplo 3
mode <- Dante ; mode <- Francisco ; mode <- Paula
#Ejemplo 3
mode(Dante) ; mode(Francisco) ; mode(Paula)
#Generando secuencia de datos
T <- 1:30
#se crea un objeto que contiene una secuencia regular de elementos ordenados cuyos tipos de datos son enteros del 1 al 30
#Es decir el vector resultante T tiene 30 elementos.
1:10-1
1:(10-1)
#Se genera una secuencia de números del 1 al 9
seq(1,5,0.5)
#Secuencia de números reales donde el primer número indica el inicio, el segundo el final y el tercero el incremento.
seq(2,3,0.2)
#o bien utilizar
seq(length=9, from=1, to=5)
n <- 11
mode(x)
lengt(x)
lenght(x)
length(x)
T <- 1:5
#Lista
#lista con vectores x e y
L1 <- list(x,y); L2 (A=x, B=y)
#Lista
#lista con vectores x e y
L1 <- list(x,y); L2 <- list(A=x, B=y)
#Lista
#lista con vectores x e y
L1 <- list(x,y); L2<- list(A=x, B=y)
#Lista
#lista con vectores x e y
L1<- list(x,y); L2<- list(A=x, B=y)
#Matrices
layout(matrix(1:6,2,3))
layout.show(6)
layout.show(5)
layout.show(2)
plot(x,y)
#Graficas
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
plot(x,y)
#Graficas
x <- rnorm(2)
y <- rnorm(2)
plot(x,y)
#Graficas
x <- rnorm(1)
y <- rnorm(1)
plot(x,y)
#Graficas
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
#Graficas
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
#Graficas
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
#y <- numeric(lengt(x))
for (i in 1:lengt(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
#y <- numeric(lengt(x))
for (i in 1:length(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
#y <- numeric(lengt(x))
for (i in 1:length(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
b=7
#y <- numeric(lengt(x))
for (i in 1:length(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
x <- 10
b=7
x <- 10
#y <- numeric(lengt(x))
for (i in 1:length(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
#y <- numeric(lengt(x))
for (i in 1:length(x)) if (x[i]==b) y [i] <- 0 else y[i] <- 1
#Se crea un vector
S <- 1:6
#Se crea una variable b
b=3
#y <- numeric(lengt(x))
for (i in 1:length(S)) if (S[i]==b) y [i] <- 0 else y[i] <- 1
#y <- numeric(lengt(x))
for (i in 1:length(S)) if (S[i]==b) y [i] <- 0 else y[i] <- 1
rm(list = ls(pat="^y"))
#Se crea un objeto el cual corresponde a una serie de números con 6 elementos, el vector generado es 1,2,3,4,5,6
S <- 1:6
#Se crea una variable b
b=3
#y <- numeric(lengt(x))
for (i in 1:length(S)) if (S[i]==b) y [i] <- 0 else y[i] <- 1
#y <- numeric(lengt(x))
for (i in 1:length(S)) if (S[i]==b) y [i] <- 0 else y[i] <- 1
#Se crea el objeto y
y <- 1:6
#y <- numeric(lengt(x))
for (i in 1:length(S)) if (S[i]==b) y [i] <- 0 else y[i] <- 1
